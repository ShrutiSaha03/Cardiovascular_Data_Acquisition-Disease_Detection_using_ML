clc
clear variables
close all

[fname, path] = uigetfile('*.txt','-ascii');
fname1 = strrep(fname,'.txt','');
fname2 = strrep(fname1,'ppg_beat_matrix','ppg_beat_fiducial.txt');

% select bit file
%**************************
% enter 110 ------------- *
% then xlsx file comes up *
%**************************
% 110 is the number of bits 



x = load(fullfile(path, fname));
fs = 250;  % Sampling rate

b = input('Enter number of beats to process:');
M = []; % To store per-beat features
% global_ppg = [];
% global_indices = []; % To track time indexing of each beat

% Fiducial point collections
systolic_locs = [];
dicrotic_locs = [];
diastolic_locs = [];
systolic_vals = [];
dicrotic_vals = [];
diastolic_vals = [];

start_idx = 0;

%---- Loop through each beat
for f = 1:b
    ppg = x(:,f);
    ppg = ppg(ppg ~= 0);  % Remove trailing zeros
    beat_len = length(ppg);
    
    % Global signal for plotting
    % global_ppg = [global_ppg; ppg];
    % global_indices = [global_indices; (start_idx + (1:beat_len))'];
    
    % First and second derivatives
    ppg_d1 = diff(ppg);
    ppg_d2 = diff(ppg_d1);
    
    %---- Systolic Peak
    [S_peak, S_peak_loc] = max(ppg);
    
    %---- Dicrotic Notch
    [Dr_peaks, Dr_locs] = findpeaks(ppg_d2, 'MinPeakDistance', 60);
    if length(Dr_locs) >= 2
        Dr_peak_loc = Dr_locs(2) - 30;  % Empirical offset
    elseif length(Dr_locs) == 1
        Dr_peak_loc = Dr_locs(1);
    else
        Dr_peak_loc = round(S_peak_loc + 50);  % Fallback
    end
    Dr_peak_loc = min(Dr_peak_loc, length(ppg));  % Bound
    Dr_peak = ppg(Dr_peak_loc);
    
    %---- Diastolic Peak
    ppg_d2_inv = -ppg_d2;
    [Ds_peaks, Ds_locs] = findpeaks(ppg_d2_inv);
    possible_ds = Ds_locs(Ds_locs > Dr_peak_loc);
    if ~isempty(possible_ds)
        Ds_peak_loc = possible_ds(1);
    else
        Ds_peak_loc = min(Dr_peak_loc + 40, length(ppg));
    end
    Ds_peak = ppg(Ds_peak_loc);
    
    %---- Store absolute indices for global signal
    systolic_locs(end+1) = start_idx + S_peak_loc;
    systolic_vals(end+1) = S_peak;

    dicrotic_locs(end+1) = start_idx + Dr_peak_loc;
    dicrotic_vals(end+1) = Dr_peak;

    diastolic_locs(end+1) = start_idx + Ds_peak_loc;
    diastolic_vals(end+1) = Ds_peak;

    % --- Timing & Amplitude Calculations ---
    SYS_PHASE = S_peak_loc / fs;
    DIAS_PHASE = (Ds_peak_loc - Dr_peak_loc) / fs;
    PULSE_TIME = SYS_PHASE + DIAS_PHASE;
    PULSE_AMPL = S_peak;
    
    M = [M; PULSE_AMPL, SYS_PHASE, DIAS_PHASE, PULSE_TIME];
    
    start_idx = start_idx + beat_len;
end

%---- Append Mean Values
mean_row = mean(M, 1);
M_with_mean = [M; mean_row];

%---- Save as Table
headers = {'PULSE_AMPL', 'SYS_PHASE', 'DIAS_PHASE', 'PULSE_TIME'};
T = array2table(M_with_mean, 'VariableNames', headers);
out_xlsx = fullfile(path, [fname2(1:end-3), 'xlsx']);
writetable(T, out_xlsx);

% %---- Final Plot: Entire PPG with Fiducials
% figure;
% t = (0:length(global_ppg)-1) / fs;
% plot(t, global_ppg, 'b-', 'LineWidth', 1.2); hold on;
% plot(systolic_locs/fs, systolic_vals, 'ro', 'DisplayName', 'Systolic Peaks');
% plot(dicrotic_locs/fs, dicrotic_vals, 'go', 'DisplayName', 'Dicrotic Notches');
% plot(diastolic_locs/fs, diastolic_vals, 'mo', 'DisplayName', 'Diastolic Peaks');
% xlabel('Time (s)');
% ylabel('Amplitude');
% title('Complete PPG Signal with Fiducial Points');
% legend;
% grid on;


% all done then 
%  save mydata.mat systolic_locs systolic_vals
%  clear variables
%  load("mydata.mat")
